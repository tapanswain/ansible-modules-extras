#!/usr/bin/python
#
# Copyright 2014 "Igor Feoktistov" <ifeoktistov@yahoo.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import re
import requests
import json
import os
class InfobloxNotFoundException(Exception):
    pass

class InfobloxNoIPavailableException(Exception):
    pass

class InfobloxGeneralException(Exception):
    pass

class InfobloxBadInputParameter(Exception):
    pass

class Infoblox(object):
    """ Implements the following subset of Infoblox IPAM API via REST API
	create_network
	delete_network
	create_networkcontainer
	delete_networkcontainer
	create_host_record
	delete_host_record
	add_host_alias
	delete_host_alias
	create_cname_record
	delete_cname_record
	create_dhcp_range
	delete_dhcp_range
	get_next_available_ip
	get_next_available_ips
	get_host
	get_host_by_ip
        get_host_by_regexp
	get_ip_by_host
	get_host_by_extattrs
	get_host_extattrs
	get_network
	get_network_by_ip
	get_network_by_extattrs
	get_network_extattrs
	update_network_extattrs
	delete_network_extattrs
    """

    def __init__(self, iba_ipaddr, iba_user, iba_password, iba_wapi_version, iba_dns_view, iba_network_view, iba_verify_ssl=True):
        '''Class initialization method
	:param iba_ipaddr: IBA IP address of management interface
	:param iba_user: IBA user name
	:param iba_password: IBA user password
	:param iba_wapi_version: IBA WAPI version (example: 1.0)
	:param iba_dns_view: IBA default view
	:param iba_network_view: IBA default network view
        :param iba_verify_ssl: IBA SSL certificate validation (example: False)
        '''
	self.iba_host = iba_ipaddr
	self.iba_user = iba_user
	self.iba_password = iba_password
	self.iba_wapi_version = iba_wapi_version
	self.iba_dns_view = iba_dns_view
	self.iba_network_view = iba_network_view
        self.iba_verify_ssl = iba_verify_ssl
    
    def get_next_available_ips(self,network,number='10'):
	""" Implements IBA next_available_ip REST API call
	Returns IP v4 address
	:param network: network in CIDR format
	"""
	rest_url = 'https://' + self.iba_host + '/wapi/v' + self.iba_wapi_version + '/network?network=' + network + '&network_view=' + self.iba_network_view
	try:
	    r = requests.get(url=rest_url, auth=(self.iba_user, self.iba_password), verify=self.iba_verify_ssl)
	    r_json = r.json()
	    if r.status_code == 200:
		if len(r_json) > 0:
		    net_ref = r_json[0]['_ref']
                    #Changed the num 1 to 10 for gettting 10 free ips 
		    rest_url = 'https://' + self.iba_host + '/wapi/v' + self.iba_wapi_version + '/' + net_ref + '?_function=next_available_ip&num='+number
		    r = requests.post(url=rest_url, auth=(self.iba_user, self.iba_password), verify=self.iba_verify_ssl)
		    r_json = r.json()
		    if r.status_code == 200 :
			ip_v4 = r_json['ips']
			return ip_v4
		    else:
			if 'text' in r_json:
			    if 'code' in r_json and r_json['code'] == 'Client.Ibap.Data':
				raise InfobloxNoIPavailableException(r_json['text'])
			    else:
				raise InfobloxGeneralException(r_json['text'])
			else:
			    r.raise_for_status()
		else:
		    raise InfobloxNotFoundException("No requested network found: " + network)
	    else:
		if 'text' in r_json:
		    raise InfobloxGeneralException(r_json['text'])
		else:
		    r.raise_for_status()
	except ValueError:
	    raise Exception(r)
	except Exception:
	    raise    
    def get_host_by_regexp(self, fqdn):
	""" Implements IBA REST API call to retrieve host records by fqdn regexp filter
	Returns array of host names in FQDN matched to given regexp filter
	:param fqdn: hostname in FQDN or FQDN regexp filter
	"""
	rest_url = 'https://' + self.iba_host + '/wapi/v' + self.iba_wapi_version + '/record:host?name~=' + fqdn + '&view=' + self.iba_dns_view
	hosts = []
	try:
            print rest_url
            print self.iba_user
            print self.iba_verify_ssl		
           
	    r = requests.get(url=rest_url, auth=(self.iba_user, self.iba_password), verify=self.iba_verify_ssl)
	    r_json = r.json()
	    if r.status_code == 200:
		if len(r_json) > 0:
		    for host in r_json:
			hosts.append(host['name'])
		    return hosts
		else:
		    raise InfobloxNotFoundException("No hosts found for regexp filter: " + fqdn)
	    else:
		if 'text' in r_json:
		    raise InfobloxGeneralException(r_json['text'])
		else:
		    r.raise_for_status()
	except ValueError:
	    raise Exception(r)
	except Exception:
	    raise
def main():
    module = AnsibleModule(
        argument_spec = dict(
	    state = dict(default='present'),
            iba_user = dict(required=True),
	          iba_ipaddr = dict(required=True),
            iba_password = dict(required=True),
            iba_wapi_version = dict(required=True),
            iba_dns_view = dict(required=True),
            iba_network_view = dict(required=True),
            iba_verify_ssl = dict(required=True),
            iba_network = dict(required=True),
            fqdn = dict(required=True)
        )
    )

    state = module.params['state']
    fqdn = module.params['fqdn']
    infbl = Infoblox(module.params['iba_ipaddr'], module.params['iba_user'], module.params['iba_password'], module.params['iba_wapi_version'], module.params['iba_dns_view'], module.params['iba_network_view'], module.params['iba_verify_ssl']);
    if state == 'present':
        infbl.get_host_by_regexp(fqdn)
    else:
        module.fail_json(msg="The state must be 'absent' or 'present' but instead we found '%s'" % (state))


# import module snippets
from ansible.module_utils.basic import *
main()
